'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FocusWithin = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.withFocusWithin = withFocusWithin;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function withFocusWithin(Component) {
    var WrappedComponent = function WrappedComponent(_ref) {
        var onFocus = _ref.onFocus,
            onBlur = _ref.onBlur,
            props = _objectWithoutProperties(_ref, ['onFocus', 'onBlur']);

        return _react2.default.createElement(
            FocusWithin,
            { onFocus: onFocus, onBlur: onBlur },
            function (_ref2) {
                var getFocusProps = _ref2.getFocusProps,
                    isFocused = _ref2.isFocused;
                return typeof Component === 'string' ? _react2.default.createElement(Component, getFocusProps(props)) : _react2.default.createElement(Component, _extends({}, getFocusProps(props), { isFocused: isFocused }));
            }
        );
    };
    WrappedComponent.displayName = 'WithFocusWithin(' + (Component.displayName || Component.name || 'Component') + ')';
    return WrappedComponent;
}

var FocusWithin = exports.FocusWithin = function (_React$Component) {
    _inherits(FocusWithin, _React$Component);

    function FocusWithin() {
        var _ref3;

        var _temp, _this, _ret;

        _classCallCheck(this, FocusWithin);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref3 = FocusWithin.__proto__ || Object.getPrototypeOf(FocusWithin)).call.apply(_ref3, [this].concat(args))), _this), _initialiseProps.call(_this), _temp), _possibleConstructorReturn(_this, _ret);
    }

    // delay by one turn of the event loop, used to consolidate timing between
    // FocusWithin events and native events


    // track mouse activity within the FocusWithin container, which allows clicking inside it
    // whenever a mousedown occurs we save the current container element, and if on mouseup
    // we are outside the container, we emit the blur event appropriately
    // mouseups can still occur outside the container with actual DOM focus remaining within
    // so we do not emit blurs for those


    _createClass(FocusWithin, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            document.addEventListener('mouseup', this.onDocumentMouseUp);
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(_, prevState) {
            var _this2 = this;

            if (prevState.isFocused && !this.state.isFocused) {
                this.delay(function () {
                    if (_this2.isUnmounted) {
                        return;
                    }
                    _this2.setState({
                        isBlurring: false
                    });
                    // check if the focus manager is actually blurred for times
                    // when document click causes a consective blur -> focus
                    if (!_this2.state.isFocused) {
                        _this2.props.onBlur({ __isFocusWithinEvent: true });
                    }
                });
            }
            // check if the focus manager was focused from the outside
            // and not from another child element
            // delay onfocus emission to be on the same timing as blur events
            if (!this.state.isBlurring && !prevState.isFocused && this.state.isFocused) {
                this.delay(this.props.onFocus, { __isFocusWithinEvent: true });
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.isUnmounted = true;
            document.removeEventListener('mouseup', this.onDocumentMouseUp);
        }
    }, {
        key: 'render',
        value: function render() {
            return this.props.children ? this.props.children({
                focusProps: this.getFocusProps(),
                getFocusProps: this.getFocusProps,
                // stabilize isFocused so that it only changes corresponding to its event emissions
                isFocused: this.state.isFocused || this.state.isBlurring
            }) : null;
        }
    }]);

    return FocusWithin;
}(_react2.default.Component);

FocusWithin.propTypes = {
    onBlur: _propTypes2.default.func,
    onFocus: _propTypes2.default.func
};
FocusWithin.defaultProps = {
    onBlur: function onBlur() {},
    onFocus: function onFocus() {}
};
FocusWithin.wrapComponent = withFocusWithin;

var _initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this.state = {
        isBlurring: false,
        isFocused: false };

    this.delay = function (cb) {
        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
        }

        return setTimeout(function () {
            if (_this3.isUnmounted) {
                return;
            }
            cb.apply(undefined, args);
        });
    };

    this.setFocusState = function (isFocused, isFocusWithinEvent) {
        var setStateCb = function setStateCb() {
            if (_this3.isUnmounted) return;
            _this3.setState(function (state) {
                return state.isFocused === isFocused ? state : !isFocused ? {
                    isFocused: isFocused,
                    isBlurring: true
                } : {
                    isFocused: isFocused
                };
            });
        };
        // delay processing native events for one turn of the event loop
        // to have it be on the same timing as FocusWithin events
        if (isFocusWithinEvent) {
            setStateCb();
        } else {
            _this3.delay(setStateCb);
        }
    };

    this.onDocumentMouseUp = function (event) {
        var container = _this3.mouseDownWithinTarget;
        var mouseUpWithinTarget = container && container.contains(event.target);
        var activeElementWithinTarget = container && container.contains(document.activeElement);
        if (!activeElementWithinTarget && !mouseUpWithinTarget) {
            _this3.setFocusState(false, _this3.lastBlurEvent ? _this3.lastBlurEvent.__isFocusWithinEvent : true);
        }
        _this3.mouseDownWithinTarget = null;
        _this3.lastBlurEvent = null;
    };

    this.getFocusProps = function () {
        var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var _onFocus = _ref4.onFocus,
            _onBlur = _ref4.onBlur,
            _onMouseDown = _ref4.onMouseDown,
            props = _objectWithoutProperties(_ref4, ['onFocus', 'onBlur', 'onMouseDown']);

        return _extends({}, props, {
            onFocus: function onFocus(event) {
                var propagationStopped = _onFocus && _onFocus(event) === false;
                if (propagationStopped || event && event.focusWithinDefaultPrevented) {
                    return;
                }
                _this3.setFocusState(true, event && event.__isFocusWithinEvent);
            },
            onBlur: function onBlur(event) {
                var propagationStopped = _onBlur && _onBlur(event) === false;
                if (propagationStopped || event && event.focusWithinDefaultPrevented) {
                    return;
                }
                // if blur event happens right after a mousedown of an element inside the FocusWithin container
                // we don't emit the blur event immediately and check if we should emit it later after the mouseup occurs
                if (_this3.mouseDownWithinTarget) {
                    event.persist && event.persist();
                    _this3.lastBlurEvent = event;
                    return;
                }
                _this3.setFocusState(false, event && event.__isFocusWithinEvent);
            },
            onMouseDown: function onMouseDown(event) {
                var propagationStopped = _onMouseDown && _onMouseDown(event) === false;
                if (propagationStopped || event && event.focusWithinDefaultPrevented) {
                    return;
                }
                _this3.mouseDownWithinTarget = event.currentTarget;
            }
        });
    };
};

exports.default = FocusWithin;

//# sourceMappingURL=index.js.map